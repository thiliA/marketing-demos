<%

(function () {
    var log = new Log(),
            data = request.getContent(),
            action = request.getParameter('action'),
            mode = request.getParameter('mode'),
            site = require('/modules/site.js'),
            uuid = require('uuid'),
            process = require('process'),
            dbHandlers = '/modules/db-handlers/',
            chartProcessors = '/modules/flot-charts/';

    response.addHeader('Content-Type', 'application/json');
    if (action == 'getDataSourceNames') {
        var dbHandler = null,
                result = null,
                message = "";

        var handler = require('/modules/datasource-handler.js');
        var dbHandlerType = dbHandlers + handler.getDatasourceHandler(data.dataSource);
        switch (data.dataSource) {
            case 'RDBMS':
            {
                dbHandler = require(dbHandlerType);
                result = dbHandler.getDataSources();
                break;
            }
            default:
                break;
        }
        print({'dataSourceNames': result})
        return;
    }
    else if (action == 'validateCon') {
        var dbHandler = null,
                result = null,
                message = "";

        var handler = require('/modules/datasource-handler.js');
        var dbHandlerType = dbHandlers + handler.getDatasourceHandler(data.dataSource);
        switch (data.dataSource) {
            case 'RDBMS':
            {
                dbHandler = require(dbHandlerType);
                result = dbHandler.validateConnection(data.conSettings);
                if (result) {
                    message = "Successfully connected to the database"
                } else {
                    message = "Connection failed !!!"
                }
                break;
            }
            default:
                break;
        }
        print({'message': message})
        return;
    }
    else if (action == 'queryDbAll') {
        var dbHandler = null,
                result = null;

        var handler = require('/modules/datasource-handler.js');
        var dbHandlerType = dbHandlers + handler.getDatasourceHandler(data.dataSource);

        switch (data.dataSource) {
            case 'RDBMS':
            {
                try {
                    dbHandler = require(dbHandlerType);
                    data.queryData['SQL Statement'] = data.queryData['SQL Statement'].replace(/^\s\s*/, '').replace(/\s\s*$/, '') + ' limit 5';
                    result = dbHandler.getData(data.conSettings, data.queryData)
                } catch (e) {
                    print({'error': true, 'message': e});
                    return;
                }
                break;
            }
            default:
                break;
        }

        var output = {};

        output.tableHeaders = Object.keys(result[0]);
        output.tableRows = [];

        for (var i in result) {
            _obj = [];
            for (var k in result[i]) {
                _obj.push(result[i][k])
            }
            output.tableRows.push(_obj);
        }

        print(output);
        return;

    } else if (action == 'createJag') {
        var result = {};
        try {

            var gadgetsLocation = '/gadgets/',
                    gadgetTemplateLocation = '/public/',
                    resource_id = uuid.generate(),
                    chartType = data.chartType,
                    newGadgetFolderName = (data.chartTitle).replace(/ /g, "_"),
                    dataFileName = 'data-api.jag',
                    dataFileNamePreview = 'data-api-preview-temp.jag',
                    localIP = process.getProperty('server.host'),
                    httpPort = process.getProperty('http.port');


            var gadgetLocation = '', pathToDataJag = '';
            if (mode == 'preview') {
                gadgetLocation = gadgetsLocation + 'temp';             // /gadgets/my_gadget
                pathToDataJag = gadgetLocation + '/' + dataFileNamePreview;
            }
            else {

                gadgetLocation = gadgetsLocation + newGadgetFolderName;             // /gadgets/my_gadget
                var file = site.isFileExists(data.appName, gadgetLocation + '/');
                if (file) {
                    gadgetLocation += '_' + resource_id;
                }
                pathToDataJag = gadgetLocation + '/' + dataFileName;                              // /gadget/my_gadget/datasource.jag
            }

            var pathToGadgetTemplate = gadgetLocation + gadgetTemplateLocation;                         // /gadget/my_gadget/public/

            site.createDirStructure(data.appName, pathToGadgetTemplate);                              // create folder structure up to public

            var gadgetTemplateDir = site.loadFile('publisher', data.chartLocation);
            site.copyDir(gadgetTemplateDir, data.appName, pathToGadgetTemplate)       //copy gadget template to /gadget/my_gadget/public

            var gadgetName = data.chartLocation.split('/')[4];

            site.removeDir(data.appName, pathToGadgetTemplate + gadgetName + '/datasource/')
            site.removeDir(data.appName, pathToGadgetTemplate + gadgetName + '/config/')
            site.removeDir(data.appName, pathToGadgetTemplate + gadgetName + '/banner.jpg')
            site.removeDir(data.appName, pathToGadgetTemplate + gadgetName + '/thumbnail.jpg')

            var processor = require('/modules/chart-processor.js');
            var chartProcessorType = chartProcessors + processor.getChartProcessor(chartType)

            var handler = require('/modules/datasource-handler.js');
            var dbHandlerType = dbHandlers + handler.getDatasourceHandler(data.dataSource);

            var dbHandlerFile = site.loadFile('portal', dbHandlerType);
            var chartProcessorFile = site.loadFile('portal', chartProcessorType);

            var dbHanldersLocation = gadgetLocation + dbHandlers;
            var chartProccessorsLocation = gadgetLocation + chartProcessors;

            site.createDirStructure(data.appName, dbHanldersLocation)
            site.createDirStructure(data.appName, chartProccessorsLocation)

            var dbHanlderFileLocation = gadgetLocation + dbHandlerType;
            var chartProccessorFileLocation = gadgetLocation + chartProcessorType;

            site.copyFile(dbHandlerFile, data.appName, dbHanldersLocation);

            site.createDirStructure(data.appName, dbHandlers)
            site.copyFile(dbHandlerFile, data.appName, dbHandlers);

            site.copyFile(chartProcessorFile, data.appName, chartProccessorsLocation);

            var pathToOptions = gadgetLocation + '/chart-options.json';
            var file = site.loadFile('publisher', data.chartOptions);
            site.createFile(data.appName, pathToOptions, file.getStream());
            file.close();

            var tempQuery = data.queryData;

            for (var key in tempQuery) {
                if (tempQuery[key].indexOf("order by") == -1) {
                    tempQuery[key] = tempQuery[key] + " order by " + data.mappingData[0][data.dataColumns[0]];
                }
            }

            var base = 'http://' + localIP + ':' + httpPort + '/' + data.appName;
            var gadgetURL = base + gadgetLocation + gadgetTemplateLocation;

            var jagFileData = '\<\%\n' +

                    'function getChartData() {\n' +
                    '   var connectionData = JSON.parse(\'' + stringify(data.conSettings) + '\');\n' +
                    '   var queryData = JSON.parse(\'' + stringify(tempQuery) + '\');\n' +
                    '   var dataColumns = JSON.parse(\'' + stringify(data.dataColumns) + '\');\n' +
                    '   var mapping = JSON.parse(\'' + stringify(data.mappingData) + '\');\n' +
                    '   var timeSeries = JSON.parse(\'' + stringify(data.timeSeries) + '\');\n' +
                    '   var dataLabels = JSON.parse(\'' + stringify(data.dataLabels) + '\');\n' +
                    '   \n' +
                    '   var dbHandler = require(\'' + dbHanlderFileLocation + '\');\n' +
                    '   var dbResult = dbHandler.getData(connectionData,queryData);\n' +
                    '   \n' +
                    '   var dataProcessor = require(\'' + chartProccessorFileLocation + '\'); \n' +
                    '   var processedData = dataProcessor.processData(dbResult,mapping,dataColumns,dataLabels,timeSeries); \n' +
                    '   \n' +
                    ' return processedData;\n' +
                    '}\n' +
                    '  \n' +
                    'print(getChartData());\n' +

                    '\%\>';

            site.createFile(data.appName, pathToDataJag, jagFileData);
            result.jagPath = "/" + data.appName + pathToDataJag + "";
            result.gadgetLocation = gadgetURL;
            log.info("File created successfully at " + result.jagPath);

            print(result);


        } catch (error) {
            response.sendError(404, 'Request processing error');
        } finally {

        }

        return;
    }
    else if (action == 'deleteTemp'){
        var tempGadgetsLocation = '/gadgets/temp/';
        try{
            site.removeDir(data,tempGadgetsLocation);
        }catch(e){
           log.info('Temp files already deleted')
        }
        return;
    }

    response.sendError(404, 'Request action not found');


})();
%>